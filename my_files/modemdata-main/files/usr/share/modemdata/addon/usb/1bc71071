# Telit FN990

channeltoband_lte() {
    if [ $1 -ge 0 ] && [ $1 -le 599 ]; then
        echo "1"
    elif [ $1 -ge 600 ] && [ $1 -le 1199 ]; then
        echo "2"
    elif [ $1 -ge 1200 ] && [ $1 -le 1949 ]; then
        echo "3"
    elif [ $1 -ge 1950 ] && [ $1 -le 2399 ]; then
        echo "4"
    elif [ $1 -ge 2400 ] && [ $1 -le 2649 ]; then
        echo "5"
    elif [ $1 -ge 2650 ] && [ $1 -le 2749 ]; then
        echo "6"
    elif [ $1 -ge 2750 ] && [ $1 -le 3449 ]; then
        echo "7"
    elif [ $1 -ge 3450 ] && [ $1 -le 3799 ]; then
        echo "8"
    elif [ $1 -ge 3800 ] && [ $1 -le 4149 ]; then
        echo "9"
    elif [ $1 -ge 4150 ] && [ $1 -le 4749 ]; then
        echo "10"
    elif [ $1 -ge 4750 ] && [ $1 -le 4949 ]; then
        echo "11"
    elif [ $1 -ge 5010 ] && [ $1 -le 5179 ]; then
        echo "12"
    elif [ $1 -ge 5180 ] && [ $1 -le 5279 ]; then
        echo "13"
    elif [ $1 -ge 5280 ] && [ $1 -le 5379 ]; then
        echo "14"
    elif [ $1 -ge 5730 ] && [ $1 -le 5849 ]; then
        echo "17"
    elif [ $1 -ge 5850 ] && [ $1 -le 5999 ]; then
        echo "18"
    elif [ $1 -ge 6000 ] && [ $1 -le 6149 ]; then
        echo "19"
    elif [ $1 -ge 6150 ] && [ $1 -le 6449 ]; then
        echo "20"
    elif [ $1 -ge 6450 ] && [ $1 -le 6599 ]; then
        echo "21"
    elif [ $1 -ge 6600 ] && [ $1 -le 7399 ]; then
        echo "22"
    elif [ $1 -ge 7500 ] && [ $1 -le 7699 ]; then
        echo "24"
    elif [ $1 -ge 7700 ] && [ $1 -le 8039 ]; then
        echo "25"
    elif [ $1 -ge 8040 ] && [ $1 -le 8689 ]; then
        echo "26"
    elif [ $1 -ge 8690 ] && [ $1 -le 9039 ]; then
        echo "27"
    elif [ $1 -ge 9210 ] && [ $1 -le 9659 ]; then
        echo "28"
    elif [ $1 -ge 9660 ] && [ $1 -le 9769 ]; then
        echo "29"
    elif [ $1 -ge 9770 ] && [ $1 -le 9869 ]; then
        echo "30"
    elif [ $1 -ge 9870 ] && [ $1 -le 9919 ]; then
        echo "31"
    elif [ $1 -ge 36000 ] && [ $1 -le 36199 ]; then
        echo "33"
    elif [ $1 -ge 36200 ] && [ $1 -le 36349 ]; then
        echo "34"
    elif [ $1 -ge 36950 ] && [ $1 -le 37549 ]; then
        echo "38"
    elif [ $1 -ge 37550 ] && [ $1 -le 37749 ]; then
        echo "39"
    elif [ $1 -ge 37750 ] && [ $1 -le 38249 ]; then
        echo "40"
    elif [ $1 -ge 38250 ] && [ $1 -le 38649 ]; then
        echo "41"
    elif [ $1 -ge 38650 ] && [ $1 -le 39649 ]; then
        echo "42"
    elif [ $1 -ge 39650 ] && [ $1 -le 41589 ]; then
        echo "43"
    elif [ $1 -ge 45590 ] && [ $1 -le 46589 ]; then
        echo "46"
    elif [ $1 -ge 46590 ] && [ $1 -le 46789 ]; then
        echo "47"
    elif [ $1 -ge 46790 ] && [ $1 -le 54539 ]; then
        echo "48"
    else
        echo "0"
    fi
}

# Temperature
O=$(sms_tool -d $DEVICE at "at#tempsens=2")
T=$(echo "$O" | awk -F[,:] '/TSENS/ {print $2}')
[ -n "$T" ] && addon 10 "Temperature" "$T &deg;C"

if [ "$REGOK" = "1" ]; then
    if [ "x$MODE_NUM" = "x7" ] || [ "x$MODE_NUM" = "x13" ]; then

        O=$(sms_tool -d $DEVICE at "at#rfsts")
        
        # Operator name z #RFSTS
        T=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {gsub(/"/,"",$14); print $14}' | xargs)
        if [ -n "$T" ] && [ -z "$FORCE_PLMN" ]; then
            COPS="$T"
        fi
        
        case "$MODE_NUM" in
            7*)
                MODE="LTE"
                ;;
            11*)
                MODE="5G SA"
                ;;
            13*)
                MODE="LTE"
                # 5G NSA
                NR_BAND=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {print $24}')
                if [ -n "$NR_BAND" ] && [ "$NR_BAND" != "0" ]; then
                    MODE="5G NSA"
                fi
                ;;
        esac
        
        # TAC
        T=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {print $6}')
        if [ -n "$T" ]; then
            T_DEC=$(printf "%d" "0x$T")
            addon 23 "TAC" "${T_DEC} ($T)"
        fi
        
        # EARFCN
        T=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {print $2}')
        if [ -n "$T" ]; then
            addon 34 "EARFCN" "$T"
            
            # Primary LTE band
            B=$(channeltoband_lte $T)
            if [ -n "$B" ] && [ "$B" != "0" ]; then
                addon 30 "Primary band" "$(band4g ${B})"
                if [ "x${MODE:0:3}" = "xLTE" ]; then
                    MODE="$MODE $(band4g ${B})"
                fi
            fi
        fi
        
        # LTE parametry z #RFSTS
        T=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {print $10}')  # PCI
        [ -n "$T" ] && addon 33 "PCI" "$T"
        
        T=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {print $3}')   # RSRP
        [ -n "$T" ] && addon 36 "RSRP" "$T dBm"
        
        T=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {print $4}')   # RSRQ
        [ -n "$T" ] && addon 37 "RSRQ" "$T dB"
        
        T=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {print $5}')   # SINR
        [ -n "$T" ] && addon 38 "SINR" "$T"
 
        
        # 5G
        if [ "x$MODE_NUM" = "x13" ] || [ "x$MODE_NUM" = "x11" ]; then
            NR_ARFCN=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {print $17}')  # NR ARFCN
            NR_BAND=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {print $24}')   # NR Band
            
            if [ -n "$NR_ARFCN" ] && [ "$NR_ARFCN" != "0" ] && [ -n "$NR_BAND" ] && [ "$NR_BAND" != "0" ]; then
                # NR Band
                T2=$(band5g ${NR_BAND})
                
                # NR Bandwidth (pole 25 - DL, pole 26 - UL)
                NR_BW_DL=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {print $25}')
                NR_BW_UL=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {print $26}')
                
                if [ -n "$NR_BW_DL" ] && [ "$NR_BW_DL" != "0" ]; then
                    addon 50 "(S1) band" "${T2} @${NR_BW_DL} MHz"
                else
                    addon 50 "(S1) band" "$T2"
                fi
                
                # Aktualizacja MODE
                if [ "x$MODE" = "xLTE" ]; then
                    MODE="5G NSA $(band4g ${B}) / ${T2}"
                else
                    MODE="$MODE / ${T2}"
                fi
                
                addon 51 "(S1) EARFCN" "$NR_ARFCN"
                
                # NR UL Bandwidth
                [ -n "$NR_BW_UL" ] && [ "$NR_BW_UL" != "0" ] && addon 31 "Bandwidth UL" "$NR_BW_UL MHz"
                [ -n "$NR_BW_DL" ] && [ "$NR_BW_DL" != "0" ] && addon 32 "Bandwidth DL" "$NR_BW_DL MHz"
                
                T=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {print $22}')  # NR PCI
                [ -n "$T" ] && addon 53 "(S1) PCI" "$T"
                
                T=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {print $19}')  # NR RSRP
                [ -n "$T" ] && addon 56 "(S1) RSRP" "$T dBm"
                
                T=$(echo "$O" | awk -F[,:] '/^#RFSTS/ {print $21}')  # NR RSRQ
                [ -n "$T" ] && addon 57 "(S1) RSRQ" "$T dB"
                
                # SINR
                MONI_INFO=$(sms_tool -d $DEVICE at "at#moni" 2>/dev/null)
                if [ $? -eq 0 ] && echo "$MONI_INFO" | grep -q "NR_SINR"; then
                    NR_SINR=$(echo "$MONI_INFO" | grep -o "NR_SINR:[0-9-]*" | cut -d: -f2)
                    [ -n "$NR_SINR" ] && addon 58 "(S1) SINR" "$NR_SINR"
                fi
            fi
        fi
        
        # CA
        O2=$(sms_tool -d $DEVICE at "at#cainfo?" 2>/dev/null)
        if [ $? -eq 0 ] && echo "$O2" | grep -q "^#CAINFO" && ! echo "$O2" | grep -q "ERROR"; then

            if echo "$O2" | grep -q "SCC\|scc"; then
                MODE="${MODE/LTE/LTE_A}"
                
                IDX=1
                IFS="
"
                LINES=$(echo "$O2" | grep -E "^\+CAINFO.*SCC|^\+CAINFO.*scc")
                for LINE in $LINES; do
                    POS=$(((IDX + 4) * 10))
                    
                    # SCC EARFCN
                    T=$(echo "$LINE" | awk -F[,:] '{print $15}')  # S1 EARFCN
                    if [ -n "$T" ] && [ "$T" != "0" ]; then
                        B=$(channeltoband_lte $T)
                        if [ -n "$B" ] && [ "$B" != "0" ]; then
                            T2=$(band4g ${B})
                            addon $POS "(S${IDX}) band" "$T2"
                            MODE="$MODE / $T2"
                            
                            addon $((POS + 4)) "(S${IDX}) EARFCN" "$T"
                            
                            # SCC1
                            T=$(echo "$LINE" | awk -F[,:] '{print $17}')  # S1 PCI
                            [ -n "$T" ] && addon $((POS + 3)) "(S${IDX}) PCI" "$T"
                            
                            T=$(echo "$LINE" | awk -F[,:] '{print $18}')  # S1 RSRP
                            [ -n "$T" ] && addon $((POS + 6)) "(S${IDX}) RSRP" "$T dBm"
                            
                            T=$(echo "$LINE" | awk -F[,:] '{print $20}')  # S1 RSRQ
                            [ -n "$T" ] && addon $((POS + 7)) "(S${IDX}) RSRQ" "$T dB"
                            
                            T=$(echo "$LINE" | awk -F[,:] '{print $21}')  # S1 SINR
                            [ -n "$T" ] && addon $((POS + 8)) "(S${IDX}) SINR" "$T"
                        fi
                        IDX=$((IDX + 1))
                    fi
                done
                unset IFS
            fi
        fi
        
        # Signal Quality Extended
        O3=$(sms_tool -d $DEVICE at "at+cesq" 2>/dev/null)
        if [ $? -eq 0 ] && echo "$O3" | grep -q "+CESQ"; then
            # Parsowanie +CESQ: rxlev,ber,rscp,ecno,rsrq,rsrp
            CESQ_VALUES=$(echo "$O3" | awk -F[,:] '/\+CESQ/ {print $2","$3","$4","$5","$6","$7}')
            if [ -n "$CESQ_VALUES" ]; then
                # RSRQ (pole 6)
                RSRQ_VAL=$(echo "$CESQ_VALUES" | cut -d, -f5)
                if [ -n "$RSRQ_VAL" ] && [ "$RSRQ_VAL" != "255" ]; then
                    RSRQ_DBM=$(( (RSRQ_VAL * 5 - 200) / 10 ))
                    addon 82 "RSRQ" "$RSRQ_DBM dB"
                fi
                
                # RSRP (pole 7)
                RSRP_VAL=$(echo "$CESQ_VALUES" | cut -d, -f6)
                if [ -n "$RSRP_VAL" ] && [ "$RSRP_VAL" != "255" ]; then
                    RSRP_DBM=$(( RSRP_VAL - 141 ))
                    addon 83 "RSRP" "$RSRP_DBM dBm"
                fi
            fi
        fi
    fi
fi
